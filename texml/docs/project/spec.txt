Draft specification of the project

Serializes XML of TeXML DTD into the TeX source. Written in Python and cosist of two parts:
* serialized itself as module;
* command-line wrapper.

TeXML serializator is referred further as "txs".

===

Processing of tags

Txs processes only tags from namespace "..." (referred further as "tx:").

If tag comes from another namespace, then txs writes start of tag as xml, then processes content of the tag as usually in the txs mode, and finally writes end tag as xml.

If unknown tag comes from "tx:" namespace, txs reports an error and stops serialization.

Tags "tx:math" and "tx:dmath" (dmath is "display math"). Tsx writes math start characters "$" or "$$", interprets content of the tag in the "math" mode and then writes correspoding math end character.

Tag "tx:text" switches processing of text into the "text" mode.

Tag "tx:noop". Txs ignores this tag, but processes its attributes. Currently the only atribute is "tx:mode". Valid values of the attribute "tx:mode" are "text" and "math".

Tag "tx:cmd" is converted into LaTeX command:

Source XML document:

<tx:cmd name="documentclass">
 <opt>12pt</opt>
 <parm>letter</parm>
</tx:cmd>

Resulting LaTeX document:

\documentclass[12pt]{letter}

Tag "tx:env" is converted into LaTex environment command (optional attributes "begin" and "end" specify names of corresponding commands):

Source XML document:

<tx:env name="lllllll" end="myend">
 <parm>aaa<parm>
 <parm>bbb</parm>
...
</tx:env>

Resulting LaTeX document:

\begin[aa,bb]{llllll}
...
\myend{lllllll}

Tag "tx:opt". Tags "tx:cmd" and "tx:env" may contain element "tx:opt" as the first child. Content of this tag is moved into the curly-brace construction ({...}) of the corresponding LaTeX command.

Tag "tx:parm". Tags "tx:cmd" and "tx:env" may contain several elements "tx:parm". Txs separates content of these "tx:parm"s by comma (",") and moves result into the square braces ([...]) construction of the corresponding LaTeX command.

Tag "tx:group" makes a TeX group:

XML: <group><cmd name="it"/>italics</group>

TeX: {\it italics}

Tag "tx:ctrl", attribute "ch" - write a control char.

xml: <tx:ctrl ch="_"/>
TeX: \_

Tag "tx:spec", attribute "cat". Print symbol of the appropriate category.
List of them is in PDF.

Tag "tx:tex". This tag may contain only text. Txs copies this text to ouput as-is (except of encoding translation).

Tag "tx:texml" is a root element of the whole document.

Tag "tx:texml" may have attribute "tx:encoding". This atribute specifies encoding of the output document (default is utf8).

===

Processing of text

Tsx produces output in the utf8 encoding. You can override it by using attribute "tx:encoding" of the root tag "tx:document".

If output encoding is not utf8, and if txs should print unicode character that not exists in output encoding, then txs signals an error and prints character as numerical entity.

Txs replaces special TeX symbols using three built-in tables:
* one for "math" mode;
* one for "text" mode;
* and one common table for both modes.

Txs processes each character of input. It looks for a substitution initially in a mapping table for a current mode and then then looks in the common table. If a substitution is found, txs outputs it without further substitutions but after reencoding.

There are built-in table with mapping of unicode characters into TeX commands. If match is found, then txs replaces unicode character by TeX code. The TeX code is 

In "text" mode, txs also replaces empty strings (no any character) by line with symbol percent ("%", TeX start-of-comment symbol). This fixes a possible problem with automatical insertion of "\par" by TeX.

===

Other XML content:

Txs expects that entities and character data sections are expanded. Anyway, it processes them

Entities: error is signaled and txs outputs entity as usual xml entity.

Cdata: processed as text

Comments: ignored

Processing instructions: ignored

TODO: more?

===

Develop DTD for TeXML


TeXML is retired. TeXML2 took ideas from TeXML. At least, tag names.

Further development (volont...):
- Java, Plain C (for xsltproc) and .net serializators
- schematron for 

Wrapper specification:
* texml.py [in_file [out_file]]. file can be "-"

