<doc id="texml.spec">
	<title>TeXML specification</title>
	<p>TeXML is an XML vocabulary for TeX. A processor translates TeXML source into TeX.</p>

	<sect>
		<title>Root element</title>
		<p>The root element of a TeXML document is the element <e>TeXML</e>.</p>
		<blockquote>
			<p>A basic template of a TeXML document:</p>
<lst><![CDATA[<?xml version="1.0" encoding="..."?>
<TeXML>
  ... your content here ...
</TeXML>
]]></lst>
		</blockquote>
	</sect>

	<sect>
		<title>Text translation</title>
		<a name="texttrans"/><p>Characters are processed as follows:</p>
		<ul>
			<li>If a character has a special meaning for TeX, then the character is translated as shown in the table below.</li>
			<li>If the character belongs to an output encoding, then the character is printed as-is.</li>
			<li>If the character exists in a LaTeX mapping table, then a corresponding substitution for the character is used.</li>
			<li>Otherwise the character is output as a string <tt>&amp;#xNN...NN;</tt> where <tt>NNNN</tt> is the hexadecimal code for the character.</li>
		</ul>
		<blockquote>
			<p>Example. TeXML:</p>
			<lst><![CDATA[<TeXML>$a \/\/ $b</TeXML>]]></lst>
			<p>TeX:</p>
			<lst>\textdollar{}a \textbackslash{}/\textbackslash{}/ \textdollar{}b</lst>
		</blockquote>
		<table border="1">
			<caption>Mapping of special symbols</caption>
			<tr>
				<th>symbol</th>
				<th>text mode</th>
				<th>math mode</th>
			</tr>
			<tr>
				<td>\</td>
				<td>\textbackslash{}</td>
				<td>\backslash{}</td>
			</tr>
			<tr>
				<td>{</td>
				<td>\{</td>
				<td>\{</td>
			</tr>
			<tr>
				<td>}</td>
				<td>\}</td>
				<td>\}</td>
			</tr>
			<tr>
				<td>$</td>
				<td>\textdollar{}</td>
				<td>\$</td>
			</tr>
			<tr>
				<td>&amp;</td>
				<td>\&amp;</td>
				<td>\&amp;</td>
			</tr>
			<tr>
				<td>#</td>
				<td>\#</td>
				<td>\#</td>
			</tr>
			<tr>
				<td>^</td>
				<td>\^{}</td>
				<td>\^{}</td>
			</tr>
			<tr>
				<td>_</td>
				<td>\_</td>
				<td>\_</td>
			</tr>
			<tr>
				<td>~</td>
				<td>\textasciitilde{}</td>
				<td>\~{}</td>
			</tr>
			<tr>
				<td>%</td>
				<td>\%</td>
				<td>\%</td>
			</tr>
			<tr>
				<td>|</td>
				<td>\textvert{}</td>
				<td>|</td>
			</tr>
			<tr>
				<td>&lt;</td>
				<td>\textless{}</td>
				<td>&lt;</td>
			</tr>
			<tr>
				<td>&gt;</td>
				<td>\textgreater{}</td>
				<td>&gt;</td>
			</tr>
		</table>
		<p>The LaTeX mapping table for unicode characters is automatically generated from the file <a href="http://www.w3.org/Math/characters/unicode.xml">unicode.xml</a>. This file is an appendix for the W3C MathML specification.</p>
		<p>Empty lines have a special meaning for TeX. They cause automatic generation of the TeX command <tt>\par</tt>. To avoid this the processor prints a line with the one symbol <tt>%</tt> (TeX comment) instead of a empty line.</p>
		<p>The TeXML processor disconnects well-known ligatures &#x201c;<tt>--</tt>&#x201d;, &#x201c;<tt>---</tt>&#x201d;, &#x201c;<tt>``</tt>&#x201d;, &#x201c;<tt>''</tt>&#x201d;, &#x201c;<tt>!`</tt>&#x201d; and &#x201c;<tt>?`</tt>&#x201d;. These ligatures being converted into &#x201c;<tt>-{}-</tt>&#x201d;, &#x201c;<tt>-{}-{}-</tt>&#x201d;, &#x201c;<tt>`{}`</tt>&#x201d;, &#x201c;<tt>'{}'</tt>&#x201d;, &#x201c;<tt>!{}`</tt>&#x201d; and &#x201c;<tt>?{}`</tt>&#x201d;.</p>
		<p>It is possible to tune text translation:</p>
		<ul>
			<li><code><![CDATA[<TeXML escape="0">...</TeXML>]]></code> leaves specials as is, without escaping,</li>
			<li><code><![CDATA[<TeXML ligatures="1">...</TeXML>]]></code> leaves ligatures as is,</li>
			<li><code><![CDATA[<TeXML emptylines="1">...</TeXML>]]></code> leaves empty lines as is.</li>
		</ul>
		<blockquote>
			<p>Example. For TeXML</p>
			<lst><![CDATA[<TeXML escape="0">$a \/\/ $b</TeXML>]]></lst>
			<p>TeX output now looks like this:</p>
			<lst>$a \/\/ $b</lst>
		</blockquote>
		<p><tt>TeXML</tt> elements can be nested. The processor correctly handles nested specifications, and performs or not performs transformations as specified.</p>
	</sect>

	<sect>
		<title>Switching between modes</title>
		<a name="mode"/><p>There are two modes: <tt>text</tt> and <tt>math</tt>.</p>
		<p>Modes only affect translation of text.</p>
		<p>The default mode is <tt>text</tt> mode. In order to change mode, use attribute <e>mode</e> of the element <e>TeXML</e>. The possible values for this attribute are <tt>math</tt> and <tt>text</tt>. If element <e>TeXML</e> is used without attribute <e>mode</e>, then the mode is not changed.</p>
<blockquote>
	<p>Example. TeXML:</p>
<lst><![CDATA[<TeXML>
  text mode here: |&#x302;
  <TeXML mode="math">
    math mode here: |&#x302;
    <TeXML mode="text">text in math in text: |&#x302;</TeXML>
    again math mode: |&#x302;
  </TeXML>
  again text mode: |&#x302;
</TeXML>
]]></lst>
<p>Symbol &#x201c;<tt>|</tt>&#x201d; being translated to &#x201c;<tt>\textvert{}</tt>&#x201d; in text mode and to &#x201c;<tt>|</tt>&#x201d; in math mode. Symbol &#x201c;<tt>&amp;#x302;</tt>&#x201d; (circumflex) being translated to &#x201c;<tt>\^</tt>&#x201d; in text mode and to &#x201c;<tt>\hat{}</tt>&#x201d; in math mode. So the TeX result is:</p>
<lst>text mode here: \textvert{}\^
math mode here: |\hat{}
text in math in text: \textvert{}\^
again math mode: |\hat{}
again text mode: \textvert{}\^</lst>
</blockquote>
		<p>Elements <e><a href="#math">math</a></e> and <e><a href="#dmath">dmath</a></e> also change mode to <tt>math</tt>. These elements are described below.</p>
	</sect>

	<sect>
		<title>Encoding commands</title>
		<p>The TeXML <e>cmd</e> element encodes TeX commands.</p>
		<ul>
			<li>To write a command with no parameters, such as <tt>\par</tt>, use <code>&lt;cmd name="par"/&gt;</code>.</li>
			<li>To add parameters to a command, add <e>parm</e> children to the <e>cmd</e> element. The processor places <e>parm</e> children within TeX groups, that is, curly braces.</li>
			<li>To add options to a command, add <e>opt</e> children to the <e>cmd</e> element. The processor places <e>opt</e> children within square braces, as LaTeX style options.</li>
		</ul>
		<blockquote>
		<p>As an example, the TeX code</p>
<lst>\documentclass[12pt]{letter}</lst>
		<p>will look like this in XML:</p>
<lst><![CDATA[<cmd name="documentclass">
  <opt>12pt</opt>
  <parm>letter</parm>
</cmd>]]></lst>
		</blockquote>
		<p>The TeXML <e>cmd</e> can have several commands <e>parm</e> or <e>opt</e>.</p>
		<blockquote>
			<p>TeXML:</p>
<lst><![CDATA[... Visit <cmd name="href">
  <parm>TeXML homepage</parm>
  <parm>http://getfo.org/texml/</parm></cmd> ...]]></lst>
			<p>TeX:</p>
			<lst>... Visit \href{TeXML homepage}{http://getfo.org/texml/} ...</lst>
		</blockquote>
	</sect>


	<sect>
		<title>Encoding environments</title>
		<p>The element <e>env</e> is a convenience for expressing LaTeX environments.</p>
		<blockquote>
			<p>In order to get this in TeX</p>
<lst>\begin{document}
  ...
\end{document}</lst>
		<p>write this in TeXML:</p>
<lst>&lt;env name="document"&gt;
  ...
&lt;/env&gt;</lst>
</blockquote>
		<p>By default the processor uses the <tt>begin</tt> command to start the environment and uses command <tt>end</tt> to finish it. If you have different conventions for the environment block you can specify commands for starting and finishing the environment in attributes <e>begin</e> and <e>end</e> of the element <e>env</e>.</p>
		<blockquote>
			<p>Custom LaTeX environment</p>
<lst>\start{list}
  ...
\finish{list}</lst>
		<p>can be generated from this TeXML:</p>
<lst>&lt;env name="list" begin="start" end="finish"&gt;
  ...
&lt;/env&gt;</lst>
</blockquote>
	</sect>


	<sect>
		<title>Encoding groups</title>
		<p>The <e>group</e> element is a convenience for encoding groups. The processor will supply an open brace at the beginning, and a close brace at the end of the group.</p>
		<blockquote>
			<p>The TeX scrap,</p>
			<lst>{\it italics}</lst>
			<p>may appear as</p>
			<lst><![CDATA[<group><cmd name="it"/>italics</group>]]></lst>
			<p>in TeXML.</p>
		</blockquote>
		<p>Elements <a name="math"/><e>math</e> and <a name="dmath"/><e>dmath</e> are conveniences for encoding math groups. The processor writes appropriate math shift symbol at the beginning and at the end of the group and also switches <a href="#mode">mode</a> to <tt>math</tt> inside the group.</p>
		<blockquote>
			<p>The TeXML code</p>
<lst><![CDATA[<math>a+b</math>
<dmath><cmd name="sqrt"/>2</dmath>]]></lst>
		<p>being translated to the following TeX code:</p>
<lst>$a+b$
$$\sqrt 2$$</lst>
</blockquote>
	</sect>

	<sect>
		<title>Encoding control symbols</title>
		<p>The <e>ch</e> attibute of the <e>ctrl</e> element encodes a control symbol, such as <code>&lt;ctrl ch="&#xa0;"/&gt;</code> for a control space (<code>\&#xa0;</code>).</p>
	</sect>

	<sect>
		<title>Encoding special symbols</title>
		<p>The processor automatically escapes special TeX symbols as <a href="#texttrans">described above</a>. But there are cases when you need to output the character, not have it converted.  In these cases use the attribute <e>cat</e> of the element <e>spec</e> to specify category of a special symbol.</p>
		<blockquote>
			<p>The TeX scrap,</p>
			<lst>{\it italics}</lst>
			<p>may also appear as</p>
			<lst><![CDATA[<spec cat="bg"/><spec cat="esc"/>it italics<spec cat="eg"/>]]></lst>
			<p>in TeXML. But doing so is not recommended.</p>
		</blockquote>
		<p>Encode special symbols directly only if you really have to do so. In most cases all you need is the set of elements <e>cmd</e>, <e>env</e> and <e>group</e>. These elements provide a logical markup and minimize the chances to get things wrong. For example, in the example above, you can forget to write a closing brace or you can mistype and produce an incorrect symbol. But if you use <code>group</code>, you are assured from such errors.</p>
		<table border="1">
			<caption><e>cat</e> attribute values</caption>
			<tr>
				<th>description</th>
				<th><e>cat</e> value</th>
				<th>output</th>
			</tr>
			<tr>
				<td>escape character</td>
				<td>esc</td>
				<td>\</td>
			</tr>
			<tr>
				<td>begin group</td>
				<td>bg</td>
				<td>{</td>
			</tr>
			<tr>
				<td>end group</td>
				<td>eg</td>
				<td>}</td>
			</tr>
			<tr>
				<td>math shift</td>
				<td>mshift</td>
				<td>$</td>
			</tr>
			<tr>
				<td>alignment tab</td>
				<td>align</td>
				<td>&amp;</td>
			</tr>
			<tr>
				<td>parameter</td>
				<td>parm</td>
				<td>#</td>
			</tr>
			<tr>
				<td>superscript</td>
				<td>sup</td>
				<td>^</td>
			</tr>
			<tr>
				<td>subscript</td>
				<td>sub</td>
				<td>_</td>
			</tr>
			<tr>
				<td>tilde</td>
				<td>tilde</td>
				<td>~</td>
			</tr>
			<tr>
				<td>comment</td>
				<td>comment</td>
				<td>%</td>
			</tr>
			<tr>
				<td>vertical line</td>
				<td>vert</td>
				<td>|</td>
			</tr>
			<tr>
				<td>less than</td>
				<td>lt</td>
				<td>&lt;</td>
			</tr>
			<tr>
				<td>greater than</td>
				<td>gt</td>
				<td>&gt;</td>
			</tr>
			<tr>
				<td>new line</td>
				<td>nl</td>
				<td><i>&lt;new line&gt;</i></td>
			</tr>
			<tr>
				<td>space</td>
				<td>space</td>
				<td><i>&lt;space&gt;</i></td>
			</tr>
			<tr>
				<td>nothing</td>
				<td>nil</td>
				<td>&#xa0;</td>
			</tr>
		</table>
	</sect>


	<sect>
		<title>Running the processor</title>
		<p>The processor is a Python program <tt>texml.py</tt>.</p>

		<blockquote>
<p>Usage:</p>
<lst>python texml.py [-e <i>encoding</i>] <i>input_file</i> <i>output_file</i></lst>
</blockquote>
		<p>The processor parses the <i>input_file</i> and saves result of transformation into the <i>output_file</i>.</p>
		<p>You can specify any encoding supported by Python codecs. The default encoding is <tt>ascii</tt>.</p>
	</sect>
</doc>
