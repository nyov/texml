#!/usr/bin/env python
# $Id: texml_con,v 1.2 2005-04-05 05:14:33 paultremblay Exp $
"""

This script uses the TeXML libraries to convert a file to ConTeXt. It then
runs the texexec command on that converted file.

It will only convert one file. You can use any options with this script that
you would use with texexec.

"""
import os, sys, commands
import Texml.handler
import xml.sax
import getopt

class Options:

    """ For now, simply pass any options along to the texexec command

    """

    def __init__(self):
        pass

    def parse_command_line(self):
        """
        Simple method to get options and arguments. For not, just check to make
        sure there is at least one argument. Assume that's a file and pass everything
        else along. 

        """
        if len(sys.argv) < 2:
            msg = 'Please pass at least on file to the command line\n'
            return msg, 0, 0

        arg = sys.argv[-1]
        options = sys.argv[1:-1]
        return 0, options, [arg]


class ContextTexml:
    def __init__(self):
        self.__level = 3

    def __print_help_message(self):
        sys.stdout.write("""Use:
texml_con <any texexec options> file
        """
        )

    def __quit(self, msg=None):
        if msg:
            sys.stderr.write(msg)
        sys.exit(1)

    def __remove_file(self, path):
        try:
            os.remove(path)
        except OSError:
            pass

    def convert_to_context(self):
        options_obj = Options()
        error, options, args = options_obj.parse_command_line()
        if error:
            sys.stderr.write(error)
            self.__print_help_message()
            self.__quit()

        for arg in args:
            if not os.path.isfile(arg):
                sys.stderr.write('"%s" not a file\n' % arg)
                continue
            filename, ext = os.path.splitext(arg)
            new_tex_file = '%s.tex' % filename 
            error = self.__convert_one_file_to_context(
                path=arg,
                tex_path = new_tex_file,
                )
            if error:
                self.__remove_file(new_tex_file)
                self.__quit(error)
            texexec_options = ' '.join(options)
            self.__texexec(texexec_options, new_tex_file)


    def __convert_one_file_to_context(self, path, tex_path, encoding='UTF-8', width=50):
        if self.__level > 2:
            sys.stdout.write('Converting %s to ConTeXt file %s\n' % (path, tex_path))
        transform_obj = Texml.handler.ParseFile()
        write_obj = file(tex_path, 'wb')
        try:
            transform_obj.parse_file(
                encoding = encoding, 
                read_obj = path, 
                write_obj = write_obj, 
                width = width, 
                use_context = 1,

            )

        except xml.sax._exceptions.SAXParseException, msg:
            error = 'Invalid XML\n'
            error += '%s\n' % (str(msg))
            return error
        except Texml.handler.InvalidXmlException, msg:
            error = 'Invalid XML\n'
            error += '%s\n' % (str(msg))
            return error

        write_obj.close()

    def __texexec(self, options, tex_file):
        command = 'texexec %s %s' % (options, tex_file)
        if self.__level > 2:
            sys.stdout.write('Executing command "%s"\n' % command)
        error = os.system(command)


if __name__ == '__main__':
    convert_obj = ContextTexml()
    convert_obj.convert_to_context()


